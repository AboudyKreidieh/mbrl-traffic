"""Script containing the non-local model object."""
# from mbrl_traffic.models.base import Model
import numpy as np
import numpy.matlib
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
from scipy.integrate import cumtrapz


class NonLocalModel():
    """Non-local model object."""

    def __init__(self, sess, ob_space, ac_space, replay_buffer, verbose):
        """Instantiate the non-local model object.

        Parameters
        ----------
        sess : tf.compat.v1.Session
            the current TensorFlow session
        ob_space : gym.spaces.*
            the observation space of the environment
        ac_space : gym.spaces.*
            the action space of the environment
        replay_buffer : mbrl_traffic.utils.replay_buffer.ReplayBuffer
            the replay buffer object used by the algorithm to store environment
            data
        verbose : int
            the verbosity level: 0 none, 1 training information, 2 tensorflow
            debug
        """
        super(NonLocalModel, self).__init__(
            sess=sess,
            ob_space=ob_space,
            ac_space=ac_space,
            replay_buffer=replay_buffer,
            verbose=verbose,
        )

    def initialize(self):
        """See parent class."""
        raise NotImplementedError

    def get_next_obs(self, obs, action):
        """See parent class."""
        raise NotImplementedError

    def update(self):
        """See parent class."""
        raise NotImplementedError

    def compute_loss(self, states, actions, next_states):
        """See parent class."""
        raise NotImplementedError

    def get_td_map(self):
        """See parent class."""
        raise NotImplementedError

    def save(self, save_path):
        """See parent class."""
        raise NotImplementedError

    def load(self, load_path):
        """See parent class."""
        raise NotImplementedError

class non_local():

    def __init__(self,v_max, l, tfinal, dt, q_init):
        # parameters for __init__ should include x and q
        Nx = len(q_init)     # discretization points
        self.v_max_new = v_max / l
        x0 = np.linspace(0, 1, Nx)
        self.dx = np.mean(np.gradient(x0))
        self.xfine = np.linspace(0, 1, Nx)
        self.ti = []
        self.tfinal = tfinal
        self.dt = dt
        q_anti = cumtrapz(q_init, x0, initial=0)  # anti deriv
        self.q = np.gradient(q_anti)
        self.x = x0
        self.t = 0

        # runs until tfinal ( all I need is current q and current x)
    def update(self,eta, q_max,lam):

        new_y = self.get_next_terms(eta, q_max,lam)
        densities = new_y
        velocities = self.vel(new_y, q_max, self.v_max_new, lam)
        # return densities and velocities

        return densities, velocities

    def get_next_terms(self, eta, q_max,lam):

            while self.x[-2] >= 1:
                self.x = np.delete(self.x, -1)  #init these change
                self.q = np.delete(self.q, -1)  #init these change

            while self.x[0] >= self.dx:
                self.x = np.append(self.x[0] - self.dx, self.x)
                left_point = self.q[-1] / np.diff(self.x[-2:])
                self.q = np.append(left_point * np.diff(self.x[0:2]), self.q)

            w = self.integrate_nonlocal_term(self.q, self.x, eta)
            self.x = self.x + self.dt * self.vel(w, q_max, self.v_max_new, lam)

            # update boundary conditions here
            while min(np.gradient(self.x)) < 1e-6:
                ind = np.argmin(np.gradient(self.x))  # find index
                if ind > 1:
                    mq = self.q[ind - 1] + self.q[ind]
                    self.x = np.delete(self.x, ind)
                    self.q[ind - 1] = mq
                    self.q = np.delete(self.q, ind)
                else:
                    mq = self.q[ind + 1] + self.q[ind]
                    self.x = np.delete(self.x, ind + 1)
                    self.q[ind] = mq
                    self.q = np.delete(self.q, ind + 1)

            old_x = self.x + np.diff(self.x[0:2]) / 2
            old_y = self.q / np.gradient(self.x)

            while old_x[-2] > 1:
                old_x = np.delete(old_x, -1)
                old_y = np.delete(old_y, -1)

            new_x = self.xfine
            set_interp = interp1d(np.append(0, old_x), np.append(old_y[-1], old_y), kind='nearest')

            new_y = set_interp(new_x)
            # self.new_y = new_y

            # if self.qfine == []:
            #     self.qfine = new_y
            # else:
            #     self.qfine = np.vstack((self.qfine, new_y))

            self.t += self.dt
            # self.ti = self.ti + [self.t]
            print(self.t)

            # if (i > 1) and (np.mod(int(i), 10)) == 0:
            #     # pass
            #     plt.figure(1)
            #     plt.clf()
            #     plt.plot(self.xfine, new_y)
            #     plt.xlim((0, 1))
            #     plt.draw()
            #     plt.pause(0.1)
                # Plot densities
                # plt.figure(1)
                # plt.clf()
                # all_densities = qfine
                # plt.contourf(new_x, np.array(ti), all_densities, levels=900, cmap='jet')
                # plt.colorbar(shrink=0.8)
                # plt.ylim((0, tfinal))
                # plt.xlim((0, 1))
                # plt.draw()
                # plt.pause(0.1)

                # Plot velocities
                # plt.figure(2)
                # plt.clf()
                # plt.contourf(new_x, np.array(ti), vel(all_densities), levels=900, cmap='jet')
                # plt.colorbar(shrink=0.8)
                # plt.ylim((0, tfinal))
                # plt.xlim((0, 1))
                # plt.draw()
                # plt.pause(0.1)

            return new_y


    def integrate_nonlocal_term(self, q, x, eta):
        x_size = len(x)
        q = np.append(q, q[1:])

        n = 0
        while len(x) < (2 * x_size) - 1:
            x= np.append(x, x[-1] + np.diff(x[n:n + 2]))
            n += 1
        dens = q / np.gradient(x)

        cc = dens[:x_size - 2]
        cc2 = dens[x_size:]
        d1 = np.append(cc, cc2)
        dens = np.append(d1, cc[0:2])

        a_t = self.a(x).reshape(len(x), 1)
        b_t = self.b(x, eta).reshape(len(x), 1)
        upbnd = np.maximum(np.minimum(x[1:], b_t), a_t)
        lobnd = np.minimum(np.maximum(x[:-1], a_t), b_t)

        part_a = self.gamma_y(np.matlib.repmat(x.reshape(len(x), 1), 1, len(x) - 1), upbnd, eta)
        part_b = self.gamma_y(np.matlib.repmat(x.reshape(len(x), 1), 1, len(x) - 1), lobnd, eta)
        w_1 = np.sum(np.multiply(dens[:-1], part_a - part_b), 1)

        return w_1[0:x_size]

    # nonlocal impact
    def a(self,x):
        return np.minimum(x, 1)

    def b(self, x, eta):
        return x + eta

    def gamma_y(self, x, y, eta):
        return (2 * (y - x) - (y - x) ** 2 / eta) / eta

    # velocity function
    def vel(sel, w, q_max,v_max_new,lam):
       return v_max_new * (1 - w / q_max) ** lam


if __name__ == "__main__":
    tn = 1001
    tfinal = 10
    # dt = tfinal / tn
    dt = 0.1
    eta = 0.01
    q_max = 1
    v_max = 11
    l = 260
    q = np.array([0.536000000000000,
                  0.541000000000000, 0.546000000000000, 0.551000000000000, 0.555000000000000, 0.555000000000000,
                  0.555000000000000, 0.555000000000001, 0.554999999999999, 0.555000000000000, 0.555000000000000,
                  0.555000000000000, 0.555000000000001, 0.554999999999999, 0.555000000000000, 0.555000000000000,
                  0.555000000000000, 0.555000000000001, 0.554999999999999, 0.555000000000000, 0.555000000000000,
                  0.555000000000000, 0.555000000000001, 0.554999999999999, 0.555000000000000, 0.555000000000000,
                  0.555000000000000, 0.555000000000001, 0.553999999999999, 0.549000000000000, 0.544000000000000,
                  0.539000000000000, 0.534000000000000, 0.528999999999999, 0.524000000000000, 0.519000000000000,
                  0.514000000000000, 0.509000000000000, 0.503999999999999, 0.499000000000000, 0.494000000000000,
                  0.489000000000000, 0.484000000000000, 0.478999999999999, 0.474000000000000, 0.469000000000000,
                  0.464000000000000, 0.459000000000000, 0.453999999999999, 0.450000000000000, 0.450000000000000,
                  0.450000000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000,
                  0.450000000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000,
                  0.450000000000000, 0.450000000000000, 0.450000000000000, 0.454500000000000, 0.459500000000000,
                  0.464500000000000, 0.469500000000000, 0.474500000000000, 0.479500000000000, 0.484500000000000,
                  0.489500000000000, 0.494500000000000, 0.499500000000000, 0.504500000000000, 0.509500000000000,
                  0.514500000000000, 0.519500000000000, 0.524500000000000, 0.529500000000000, 0.534500000000000,
                  0.539500000000000, 0.544500000000000, 0.549500000000000, 0.554500000000000, 0.559500000000000,
                  0.564500000000000, 0.569500000000000, 0.574500000000000, 0.579500000000000, 0.584500000000000,
                  0.589500000000000, 0.594500000000000, 0.599500000000000, 0.604500000000000, 0.609500000000000,
                  0.614500000000000, 0.618000000000000, 0.618000000000000, 0.618000000000000, 0.618000000000000,
                  0.618000000000000, 0.618000000000000, 0.618000000000000, 0.618000000000000, 0.618000000000000,
                  0.618000000000000, 0.618000000000000, 0.618000000000000, 0.613500000000000, 0.608500000000000,
                  0.603500000000000, 0.598500000000000, 0.593500000000000, 0.588500000000000, 0.583500000000000,
                  0.578500000000000, 0.573500000000000, 0.568500000000000, 0.563500000000000, 0.558500000000000,
                  0.553500000000000, 0.548500000000000, 0.543500000000000, 0.538500000000000, 0.533500000000000,
                  0.528500000000000, 0.523500000000000, 0.518500000000000, 0.513500000000000, 0.508500000000000,
                  0.503500000000000, 0.498500000000000, 0.493500000000000, 0.488500000000000, 0.483500000000000,
                  0.478500000000000, 0.473500000000000, 0.468500000000000, 0.463500000000000, 0.458500000000000,
                  0.453500000000000, 0.450000000000000, 0.454500000000000, 0.459500000000000, 0.464500000000000,
                  0.469500000000000, 0.474500000000000, 0.479500000000000, 0.484500000000000, 0.489500000000000,
                  0.494500000000000, 0.499500000000000, 0.504500000000000, 0.509500000000000, 0.514500000000000,
                  0.519500000000000, 0.524500000000000, 0.529500000000000, 0.534500000000000, 0.539500000000000,
                  0.544500000000000, 0.549500000000000, 0.554500000000000, 0.559500000000000, 0.564500000000000,
                  0.569500000000000, 0.574500000000000, 0.579500000000000, 0.584500000000000, 0.589500000000000,
                  0.594500000000000, 0.599500000000000, 0.604500000000000, 0.609500000000000, 0.614500000000000,
                  0.619500000000000, 0.624500000000000, 0.629500000000000, 0.634500000000000, 0.639500000000000,
                  0.644500000000000, 0.649500000000000, 0.653500000000000, 0.653500000000000, 0.653500000000000,
                  0.653500000000000, 0.653500000000000, 0.649000000000000, 0.644000000000000, 0.639000000000000,
                  0.634000000000000, 0.629000000000000, 0.624000000000000, 0.619000000000000, 0.614000000000000,
                  0.609000000000000, 0.604000000000000, 0.599000000000000, 0.594000000000000, 0.589000000000000,
                  0.584000000000000, 0.579000000000000, 0.574000000000000, 0.569000000000000, 0.564000000000000,
                  0.559000000000000, 0.554000000000000, 0.549000000000000, 0.544000000000000, 0.539000000000000,
                  0.534000000000000, 0.529000000000000, 0.524000000000000, 0.519000000000000, 0.514000000000000,
                  0.509000000000000, 0.504000000000000, 0.499000000000000, 0.494000000000000, 0.489000000000000,
                  0.484000000000000, 0.479000000000000, 0.476000000000000, 0.476000000000000, 0.476000000000000,
                  0.476000000000000, 0.476000000000000, 0.477000000000000, 0.482000000000000, 0.487000000000000,
                  0.492000000000000, 0.497000000000000, 0.502000000000000, 0.507000000000000, 0.512000000000000,
                  0.517000000000000, 0.522000000000000, 0.527000000000000, 0.532000000000000, 0.537000000000000,
                  0.542000000000000, 0.547000000000000, 0.552000000000000, 0.557000000000000, 0.562000000000000,
                  0.567000000000000, 0.572000000000000, 0.577000000000000, 0.582000000000000, 0.587000000000000,
                  0.592000000000000, 0.597000000000000, 0.602000000000000, 0.607000000000000, 0.612000000000000,
                  0.617000000000000, 0.622000000000000, 0.627000000000000, 0.632000000000000, 0.637000000000000,
                  0.642000000000000, 0.647000000000000, 0.652000000000000, 0.652500000000000, 0.652500000000000,
                  0.652500000000000, 0.652500000000000, 0.650500000000000, 0.645500000000000, 0.640500000000000,
                  0.635500000000000, 0.630500000000000, 0.625500000000000, 0.620500000000000, 0.615500000000000,
                  0.610500000000000, 0.605500000000000, 0.600500000000000, 0.595500000000000, 0.590500000000000,
                  0.585500000000000, 0.580500000000000, 0.575500000000000, 0.570500000000000, 0.565500000000000,
                  0.560500000000000, 0.555500000000000, 0.550500000000000, 0.545500000000000, 0.540500000000000,
                  0.535500000000000, 0.530500000000000, 0.525500000000000, 0.520500000000000, 0.515500000000000,
                  0.510500000000000, 0.505500000000000, 0.500500000000000, 0.495500000000000, 0.490500000000000,
                  0.485500000000000, 0.480500000000000, 0.475500000000000, 0.470500000000000, 0.465500000000000,
                  0.460500000000000, 0.455500000000000, 0.454500000000000, 0.459000000000000, 0.464000000000000,
                  0.469000000000000, 0.474000000000000, 0.479000000000000, 0.484000000000000, 0.489000000000000,
                  0.494000000000000, 0.499000000000000, 0.504000000000000, 0.509000000000000, 0.514000000000000,
                  0.519000000000000, 0.524000000000000, 0.529000000000000, 0.534000000000000, 0.539000000000000,
                  0.544000000000000, 0.549000000000000, 0.554000000000000, 0.559000000000000, 0.564000000000000,
                  0.569000000000000, 0.574000000000000, 0.579000000000000, 0.584000000000000, 0.589000000000000,
                  0.594000000000000, 0.599000000000000, 0.604000000000000, 0.609000000000000, 0.614000000000000,
                  0.619000000000000, 0.624000000000000, 0.624500000000000, 0.624500000000000, 0.624500000000000,
                  0.624500000000000, 0.624500000000000, 0.624500000000000, 0.624500000000000, 0.624500000000000,
                  0.624500000000000, 0.624500000000000, 0.620500000000000, 0.615500000000000, 0.610500000000000,
                  0.605500000000000, 0.600500000000000, 0.595500000000000, 0.590500000000000, 0.585500000000000,
                  0.580500000000000, 0.575500000000000, 0.570500000000000, 0.565500000000000, 0.560500000000000,
                  0.555500000000000, 0.550500000000000, 0.545500000000000, 0.540500000000000, 0.535500000000000,
                  0.530500000000000, 0.525500000000000, 0.520500000000000, 0.515500000000000, 0.510500000000000,
                  0.505500000000000, 0.500500000000000, 0.495500000000000, 0.490500000000000, 0.485500000000000,
                  0.480500000000000, 0.475500000000000, 0.470500000000000, 0.465500000000000, 0.460500000000000,
                  0.455500000000000, 0.450500000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000,
                  0.450000000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000,
                  0.450000000000000, 0.454000000000000, 0.459000000000000, 0.464000000000000, 0.469000000000000,
                  0.474000000000000, 0.479000000000000, 0.484000000000000, 0.489000000000000, 0.494000000000000,
                  0.499000000000000, 0.504000000000000, 0.509000000000000, 0.514000000000000, 0.519000000000000,
                  0.524000000000000, 0.529000000000000, 0.534000000000000, 0.539000000000000, 0.544000000000000,
                  0.549000000000000, 0.554000000000000, 0.559000000000000, 0.564000000000001, 0.569000000000000,
                  0.574000000000000, 0.579000000000000, 0.582000000000000, 0.582000000000000, 0.582000000000000,
                  0.582000000000000, 0.582000000000000, 0.582000000000000, 0.582000000000000, 0.582000000000000,
                  0.582000000000000, 0.582000000000000, 0.582000000000000, 0.582000000000000, 0.582000000000000,
                  0.582000000000000, 0.582000000000000, 0.582000000000000, 0.582000000000000, 0.582000000000000,
                  0.582000000000000, 0.578000000000000, 0.573000000000000, 0.568000000000000, 0.563000000000000,
                  0.558000000000000, 0.553000000000000, 0.548000000000000, 0.543000000000000, 0.538000000000000,
                  0.533000000000000, 0.528000000000000, 0.523000000000000, 0.518000000000000, 0.513000000000000,
                  0.508000000000000, 0.503000000000000, 0.498000000000000, 0.493000000000000, 0.488000000000000,
                  0.483000000000000, 0.478000000000000, 0.473000000000000, 0.468000000000000, 0.463000000000000,
                  0.458000000000000, 0.453000000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000,
                  0.450000000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000,
                  0.450000000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000,
                  0.450000000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000,
                  0.450000000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000, 0.450000000000000,
                  0.450000000000000, 0.452500000000000, 0.457500000000000, 0.462500000000000, 0.467500000000000,
                  0.472500000000000, 0.477500000000000, 0.482500000000000, 0.487500000000000])
    lam = 1

    # q, _ = non_local(eta, v_max, q_max, l, tfinal, dt, q)
    mode = non_local(v_max, l, tfinal, dt, q)

    for i in np.arange(0, (tfinal / dt)):
        densities, _ = mode.update(eta, q_max, lam)

        if (i > 1) and (np.mod(int(i), 10)) == 0:
            # pass
            plt.figure(1)
            plt.clf()
            plt.plot(mode.xfine, densities)
            plt.xlim((0, 1))
            plt.draw()
            plt.pause(0.1)
    # for i in np.arange(1000):
    #
    #     #get next obs should be something like this
    #     qfine, _, q, x = non_local(eta, v_max, q_max, l, tfinal, dt, q, x)
    #
    #     Nx = len(qfine)
    #     xfine = np.linspace(0, 1, Nx)
    #     plt.figure(1)
    #     plt.clf()
    #     plt.plot(xfine, qfine)
    #     plt.xlim((0, 1))
    #     plt.draw()
    #     plt.pause(0.1)

        #action items; set up get next obs, set up init --> q_init is only used at first iterations,
