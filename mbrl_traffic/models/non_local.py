import numpy as np
import numpy.matlib
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
from scipy.integrate import cumtrapz

def non_local(eta, v_max, q_max, L , Tfinal,dt, Q_init):

    # discretization
    Nx = len(Q_init)
    v_max_new = v_max / L
    x0 = np.linspace(0, 1, Nx)
    dx = np.mean(np.diff(x0))
    Xfine = np.linspace(0, 1, 1001)
    Ti = []
    Qfine = []
    all_x = []

    Q_anti = cumtrapz(Q_init, x0, initial=0) #anti deriv
    Q = np.diff(Q_anti)

    # nonlocal impact
    a = lambda x: np.minimum(x, 1)
    b = lambda x: x + eta
    GAMMA_Y = lambda t, x, y: (2 * (y - x) - (y - x) ** 2 / eta) / eta

    # initial datum and boundary conditions
    u = lambda t: (t >= 0) * (t < 1) + (t >= 2) * (t < 3) + (t >= 4) * (t < 5) + (t >= 6) * (t < 7) + (t >= 8) * (t < 9)
    v = lambda t: (t >= 1) * (t < 2) + (t >= 3) * (t < 4) + (t >= 5) * (t < 6) + (t >= 7) * (t < 8) + (t >= 9) * (t < 10)

    # velocity function
    vel = lambda w, t, x: v_max_new * ( 1 - w/q_max)

    X = x0
    T = 0

    Nt = Tfinal / dt
    for i in np.arange(0, (Tfinal / dt)):

        w = integrate_nonlocal_term(GAMMA_Y, a, b, Q, X, T, v, eta)
        X = X + dt * vel(w, T, X)

        # update boundary condtions here
        while min(np.diff(X)) < 1e-6:
            ind = np.argmin(np.diff(X)) # find index
            # print(ind)
            if ind > 1:
                mq = Q[ind - 1] + Q[ind]
                X = np.delete(X, ind)
                Q[ind - 1] = mq
                Q = np.delete(Q, ind)
            else:
                mq = Q[ind + 1] + Q[ind]
                X = np.delete(X, ind+1)
                Q[ind] = mq
                Q = np.delete(Q, ind+1)

        old_x = X[1:] + np.diff(X[0:2]) / 2
        old_y = Q / np.diff(X)
        Xfine[Xfine < min(old_x)] = np.nan
        Xfine[Xfine > max(old_x)] = np.nan
        new_x = Xfine
        set_interp = interp1d(old_x, old_y, kind='nearest')

        new_y = set_interp(new_x)
        # new_y[new_y == np.nan] = 0
        if Qfine == []:
            Qfine = new_y
        else:
            Qfine = np.vstack((Qfine,new_y))
            # all_x = np.vstack((all_x, Xfine))
        Ti = Ti + [T]
        # print(i > 1 & np.mod(int(i), 100) == 0)
        if (i > 1) and (np.mod(int(i), 100)) == 0:
            # if all_x ==[]:
            #     all_x = Xfine
            # else:
            #     all_x = np.vstack((all_x, Xfine))
            # time_steps = np.array(Ti)
            x = Xfine
            # all_densities = Qfine
            # # all_speeds = vel(Qfine,0, 0)
            # # visualize_plots(x, all_densities, all_speeds, time_steps)
            plt.clf()
            all_densities = Qfine
            # x_vector, y_vector = np.meshgrid(Xfine, np.array(Ti))
            plt.contourf(x, np.array(Ti), all_densities, levels=900, cmap='jet')
            plt.colorbar(shrink=0.8)
            # # plt.clim(-5, 5)
            plt.ylim((0, Tfinal))
            plt.xlim((0, 1))
            plt.draw()
            plt.pause(0.1)

            # figure(11)
            # plt.plot(X[1:] + np.diff(X[:2]) / 2, Q / np.diff(X))
            # axis([-0.1, 1.1, 0, 1])

            #
            # figure(16)
            # h = surf(Xfine, Ti, vel(Qfine,0, 0))
            # set(h, 'LineStyle', 'none');
            # view(2)
            # caxis([0, 1])
            # drawnow()
            #
            # figure(17)
            # h = surf(Xfine, Ti, Qfine. * vel(Qfine,0, 0))
            # set(h, 'LineStyle', 'none')
            # caxis([0, 1])
            # view(2)
            # drawnow()

        while X[-1] >= 1:
            X = np.delete(X, -1)
            Q = np.delete(Q, -1)

        while X[0] >= dx:
            X = np.append(X[0] - dx, X)
            Q = np.append(u(T) * dx, Q)

        T = T + dt

    time_steps = np.array(Ti)
    x = Xfine
    all_densities = Qfine

    # all_speeds = vel(Qfine, 0, 0)
    # visualize_plots(x, all_densities, all_speeds, time_steps)
    # x_vector, y_vector = np.meshgrid(x, time_steps)
    # plt.contourf(x, time_steps, all_densities, levels=900, cmap='jet')

    # x_vector, y_vector = np.meshgrid(Xfine, np.array(Ti))
    # plt.contourf(x_vector, y_vector, all_densities, levels=900, cmap='jet')
    # plt.colorbar(shrink=0.8)
    # plt.show()

    Z = X[1:] / 2 + X[0:-1] / 2
    D = X[1:] - X[0:-1]
    XE = X
    QD = Q / D
    QDE = QD

    return X, Q, Z, D


def integrate_nonlocal_term(GAMMA_Y, a, b, q, x, t, v, eta):

    a_T = a(x).reshape(len(x), 1)
    b_T = b(x).reshape(len(x), 1)
    UpBnd = np.maximum(np.minimum(x[1:], b_T), a_T)
    LoBnd = np.minimum(np.maximum(x[:-1], a_T), b_T)

    part_a = GAMMA_Y(t, np.matlib.repmat(x.reshape(len(x), 1),1,len(x)-1), UpBnd)
    part_b = GAMMA_Y(t, np.matlib.repmat(x.reshape(len(x), 1), 1,len(x)-1), LoBnd)
    part_c = v(t)*(GAMMA_Y(t,x,a(x)+eta) - GAMMA_Y(t,x,b(x)))
    w_1 = np.sum(np.multiply(q / (x[1:] - x[:-1]), part_a - part_b), 1)
    w_2 = w_1 + part_c
    w_2[x >1] = v(t)
    return w_2


def visualize_plots(x, all_densities, all_speeds, time_steps):
    """Create surface plot for density and velocity evolution of simulation.

    Parameters
    ----------
    x : array-like or list
        points of the road length to plot against
    all_densities: N x M array-like matrix
        density values on the road length M at every time step N.
    all_speeds: N x M array-like matrix
        velocity values on the road length M at every time step N.
    time_steps: list
        discrete time steps that the simulation has run for
    """
    # density plot
    fig, plots = plt.subplots(1,2, figsize=(10, 10))
    fig.subplots_adjust(hspace=.5)
    y_vector, x_vector = np.meshgrid(x, time_steps)
    first_plot = plots[0].contourf(x_vector, y_vector, all_densities, levels=900, cmap='jet')
    plots[0].set(ylabel='Length (Position on Street in meters)', xlabel='Time (seconds)')
    plots[0].set_title('Density Evolution')
    color_bar = fig.colorbar(first_plot, ax=plots[0], shrink=0.8)
    color_bar.ax.set_title('Density\nLevels', fontsize=8)

    # velocity plot
    second_plot = plots[1].contourf(x_vector, y_vector, all_speeds, levels=900, cmap='jet')
    plots[1].set(ylabel='Length (Position on Street in meters)', xlabel='Time (seconds)')
    plots[1].set_title('Velocity Evolution (m/s)')
    color_bar1 = fig.colorbar(second_plot, ax=plots[1], shrink=0.8)
    color_bar1.ax.set_title('Velocity\nLevels (m/s)', fontsize=8)
    plt.show()




Tn = 1001
Tfinal = 5
dt = Tfinal / Tn
eta = 0.1
q_max = 1
v_max = 11
L = 1
# Q0 = lambda x: 0 * x
# Nx = 2001
# x0 = np.linspace(0, 1, Nx + 1)
# Q = np.diff(Q0(x0))

Q = Q_init = np.array([0.536000000000000,
              0.541000000000000,0.546000000000000,0.551000000000000,0.555000000000000,0.555000000000000,0.555000000000000,0.555000000000001,0.554999999999999,0.555000000000000,0.555000000000000,0.555000000000000,0.555000000000001,0.554999999999999,0.555000000000000,0.555000000000000,0.555000000000000,0.555000000000001,0.554999999999999,0.555000000000000,0.555000000000000,0.555000000000000,0.555000000000001,0.554999999999999,0.555000000000000,0.555000000000000,0.555000000000000,0.555000000000001,0.553999999999999,0.549000000000000,0.544000000000000,0.539000000000000,0.534000000000000,0.528999999999999,0.524000000000000,0.519000000000000,0.514000000000000,0.509000000000000,0.503999999999999,0.499000000000000,0.494000000000000,0.489000000000000,0.484000000000000,0.478999999999999,0.474000000000000,0.469000000000000,0.464000000000000,0.459000000000000,0.453999999999999,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.454500000000000,0.459500000000000,0.464500000000000,0.469500000000000,0.474500000000000,0.479500000000000,0.484500000000000,0.489500000000000,0.494500000000000,0.499500000000000,0.504500000000000,0.509500000000000,0.514500000000000,0.519500000000000,0.524500000000000,0.529500000000000,0.534500000000000,0.539500000000000,0.544500000000000,0.549500000000000,0.554500000000000,0.559500000000000,0.564500000000000,0.569500000000000,0.574500000000000,0.579500000000000,0.584500000000000,0.589500000000000,0.594500000000000,0.599500000000000,0.604500000000000,0.609500000000000,0.614500000000000,0.618000000000000,0.618000000000000,0.618000000000000,0.618000000000000,0.618000000000000,0.618000000000000,0.618000000000000,0.618000000000000,0.618000000000000,0.618000000000000,0.618000000000000,0.618000000000000,0.613500000000000,0.608500000000000,0.603500000000000,0.598500000000000,0.593500000000000,0.588500000000000,0.583500000000000,0.578500000000000,0.573500000000000,0.568500000000000,0.563500000000000,0.558500000000000,0.553500000000000,0.548500000000000,0.543500000000000,0.538500000000000,0.533500000000000,0.528500000000000,0.523500000000000,0.518500000000000,0.513500000000000,0.508500000000000,0.503500000000000,0.498500000000000,0.493500000000000,0.488500000000000,0.483500000000000,0.478500000000000,0.473500000000000,0.468500000000000,0.463500000000000,0.458500000000000,0.453500000000000,0.450000000000000,0.454500000000000,0.459500000000000,0.464500000000000,0.469500000000000,0.474500000000000,0.479500000000000,0.484500000000000,0.489500000000000,0.494500000000000,0.499500000000000,0.504500000000000,0.509500000000000,0.514500000000000,0.519500000000000,0.524500000000000,0.529500000000000,0.534500000000000,0.539500000000000,0.544500000000000,0.549500000000000,0.554500000000000,0.559500000000000,0.564500000000000,0.569500000000000,0.574500000000000,0.579500000000000,0.584500000000000,0.589500000000000,0.594500000000000,0.599500000000000,0.604500000000000,0.609500000000000,0.614500000000000,0.619500000000000,0.624500000000000,0.629500000000000,0.634500000000000,0.639500000000000,0.644500000000000,0.649500000000000,0.653500000000000,0.653500000000000,0.653500000000000,0.653500000000000,0.653500000000000,0.649000000000000,0.644000000000000,0.639000000000000,0.634000000000000,0.629000000000000,0.624000000000000,0.619000000000000,0.614000000000000,0.609000000000000,0.604000000000000,0.599000000000000,0.594000000000000,0.589000000000000,0.584000000000000,0.579000000000000,0.574000000000000,0.569000000000000,0.564000000000000,0.559000000000000,0.554000000000000,0.549000000000000,0.544000000000000,0.539000000000000,0.534000000000000,0.529000000000000,0.524000000000000,0.519000000000000,0.514000000000000,0.509000000000000,0.504000000000000,0.499000000000000,0.494000000000000,0.489000000000000,0.484000000000000,0.479000000000000,0.476000000000000,0.476000000000000,0.476000000000000,0.476000000000000,0.476000000000000,0.477000000000000,0.482000000000000,0.487000000000000,0.492000000000000,0.497000000000000,0.502000000000000,0.507000000000000,0.512000000000000,0.517000000000000,0.522000000000000,0.527000000000000,0.532000000000000,0.537000000000000,0.542000000000000,0.547000000000000,0.552000000000000,0.557000000000000,0.562000000000000,0.567000000000000,0.572000000000000,0.577000000000000,0.582000000000000,0.587000000000000,0.592000000000000,0.597000000000000,0.602000000000000,0.607000000000000,0.612000000000000,0.617000000000000,0.622000000000000,0.627000000000000,0.632000000000000,0.637000000000000,0.642000000000000,0.647000000000000,0.652000000000000,0.652500000000000,0.652500000000000,0.652500000000000,0.652500000000000,0.650500000000000,0.645500000000000,0.640500000000000,0.635500000000000,0.630500000000000,0.625500000000000,0.620500000000000,0.615500000000000,0.610500000000000,0.605500000000000,0.600500000000000,0.595500000000000,0.590500000000000,0.585500000000000,0.580500000000000,0.575500000000000,0.570500000000000,0.565500000000000,0.560500000000000,0.555500000000000,0.550500000000000,0.545500000000000,0.540500000000000,0.535500000000000,0.530500000000000,0.525500000000000,0.520500000000000,0.515500000000000,0.510500000000000,0.505500000000000,0.500500000000000,0.495500000000000,0.490500000000000,0.485500000000000,0.480500000000000,0.475500000000000,0.470500000000000,0.465500000000000,0.460500000000000,0.455500000000000,0.454500000000000,0.459000000000000,0.464000000000000,0.469000000000000,0.474000000000000,0.479000000000000,0.484000000000000,0.489000000000000,0.494000000000000,0.499000000000000,0.504000000000000,0.509000000000000,0.514000000000000,0.519000000000000,0.524000000000000,0.529000000000000,0.534000000000000,0.539000000000000,0.544000000000000,0.549000000000000,0.554000000000000,0.559000000000000,0.564000000000000,0.569000000000000,0.574000000000000,0.579000000000000,0.584000000000000,0.589000000000000,0.594000000000000,0.599000000000000,0.604000000000000,0.609000000000000,0.614000000000000,0.619000000000000,0.624000000000000,0.624500000000000,0.624500000000000,0.624500000000000,0.624500000000000,0.624500000000000,0.624500000000000,0.624500000000000,0.624500000000000,0.624500000000000,0.624500000000000,0.620500000000000,0.615500000000000,0.610500000000000,0.605500000000000,0.600500000000000,0.595500000000000,0.590500000000000,0.585500000000000,0.580500000000000,0.575500000000000,0.570500000000000,0.565500000000000,0.560500000000000,0.555500000000000,0.550500000000000,0.545500000000000,0.540500000000000,0.535500000000000,0.530500000000000,0.525500000000000,0.520500000000000,0.515500000000000,0.510500000000000,0.505500000000000,0.500500000000000,0.495500000000000,0.490500000000000,0.485500000000000,0.480500000000000,0.475500000000000,0.470500000000000,0.465500000000000,0.460500000000000,0.455500000000000,0.450500000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.454000000000000,0.459000000000000,0.464000000000000,0.469000000000000,0.474000000000000,0.479000000000000,0.484000000000000,0.489000000000000,0.494000000000000,0.499000000000000,0.504000000000000,0.509000000000000,0.514000000000000,0.519000000000000,0.524000000000000,0.529000000000000,0.534000000000000,0.539000000000000,0.544000000000000,0.549000000000000,0.554000000000000,0.559000000000000,0.564000000000001,0.569000000000000,0.574000000000000,0.579000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.582000000000000,0.578000000000000,0.573000000000000,0.568000000000000,0.563000000000000,0.558000000000000,0.553000000000000,0.548000000000000,0.543000000000000,0.538000000000000,0.533000000000000,0.528000000000000,0.523000000000000,0.518000000000000,0.513000000000000,0.508000000000000,0.503000000000000,0.498000000000000,0.493000000000000,0.488000000000000,0.483000000000000,0.478000000000000,0.473000000000000,0.468000000000000,0.463000000000000,0.458000000000000,0.453000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.450000000000000,0.452500000000000,0.457500000000000,0.462500000000000,0.467500000000000,0.472500000000000,0.477500000000000,0.482500000000000,0.487500000000000])
non_local(eta, v_max, q_max, L , Tfinal, dt, Q)